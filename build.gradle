// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    ext {
        decompose_version = '0.2.1'
        kotlin_version = "1.4.31"
        compose_kotlin_compiler_version = kotlin_version
        compose_jetpack_version = '1.0.0-beta03'
        compose_jetbrains_version = '0.4.0-build177'
        reaktive_version = '1.1.21'
        mvikotlin_version = '2.0.0'
        androidx_appcompat_version = '1.2.0'
        androidx_core_ktx_version = '1.3.2'
        android_material_version = '1.3.0'
        androidx_lifecycle_common_java8_version = '2.3.1'
        androidx_activity_version = '1.3.0-alpha05'
        androidx_activity_compose_version = '1.3.0-alpha05'
        android_material_version = '1.3.0'
        js_kotlin_react_version = '16.13.1-pre.114-kotlin-1.4.0'
        js_kotlin_react_dom_version = '16.13.1-pre.114-kotlin-1.4.0'
        js_kotlin_styled_version = '1.0.0-pre.114-kotlin-1.4.0'
        js_kotlin_css_version = '1.0.0-pre.114-kotlin-1.4.0'
        js_muirwik_version = '0.6.0'
    }
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.2.0-beta04'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.compose:compose-gradle-plugin:$compose_jetbrains_version"
        classpath "com.arkivanov.plugin:gradle-plugin:1.0"
    }
}

allprojects {
    repositories {
        google()
        jcenter()
        mavenLocal()
        maven { url "https://maven.pkg.jetbrains.space/public/p/compose/dev" }
        maven { url "https://dl.bintray.com/cfraser/muirwik" }
    }
}

boolean setupMultiplatform(Project project, List<Target> targets = Target.values().toList(), boolean isJsIrEnabled = true) {
    if (!targets.any { isTargetEnabled(it) }) {
        return false
    }

    doIfAndroidEnabled {
        project.plugins.apply("com.android.library")
    }

    project.plugins.apply("kotlin-multiplatform")

    setupMultiplatformCommon(project)
    doIfAndroidEnabled {
        if (Target.ANDROID in targets) {
            setupMultiplatformAndroid(project)
            setupAndroid(project)
        }
    }

    doIfJvmEnabled {
        if (Target.JVM in targets) {
            setupMultiplatformJvm(project)
        }
    }

    doIfIosEnabled {
        if (Target.IOS in targets) {
            setupMultiplatformIos(project)
        }
    }

    doIfMacosX64Enabled {
        if (Target.MACOS_X64 in targets) {
            setupMultiplatformMacosX64(project)
        }
    }

    doIfTvosEnabled {
        if (Target.TVOS in targets) {
            setupMultiplatformTvos(project)
        }
    }

    doIfJsEnabled {
        if (Target.JS in targets) {
            setupMultiplatformJs(project, isJsIrEnabled)
        }
    }

    return true
}

private void setupMultiplatformCommon(Project project) {
    project.kotlin {
        sourceSets {
            commonMain {
                dependencies {
                    implementation kotlin("stdlib")
                }
            }

            commonTest {
                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-common:$kotlin_version"
                    implementation "org.jetbrains.kotlin:kotlin-test-annotations-common:$kotlin_version"
                }
            }

            nonAndroidMain {
                dependsOn commonMain
            }

            nonAndroidTest {
                dependsOn commonTest
            }

            nativeMain {
                dependsOn commonMain
            }

            nativeTest {
                dependsOn commonTest
            }

            nonNativeMain {
                dependsOn commonMain
            }

            nonNativeTest {
                dependsOn commonTest
            }
        }
    }
}

private void setupMultiplatformAndroid(Project project) {
    project.kotlin {
        android()

        sourceSets {
            androidMain {
                dependsOn nonNativeMain
            }

            androidTest {
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                }
            }
        }
    }
}

private void setupMultiplatformJvm(Project project) {
    project.kotlin {
        jvm()

        sourceSets {
            jvmMain {
                dependsOn nonAndroidMain
                dependsOn nonNativeMain
            }

            jvmTest {
                dependsOn nonAndroidTest
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
                }
            }
        }
    }
}

private void setupMultiplatformIos(Project project) {
    project.kotlin {
        ios()

        sourceSets {
            iosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            iosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformMacosX64(Project project) {
    project.kotlin {
        macosX64()

        sourceSets {
            macosX64Main {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            macosX64Test {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformTvos(Project project) {
    project.kotlin {
        tvos()

        sourceSets {
            tvosMain {
                dependsOn nonAndroidMain
                dependsOn nativeMain
            }

            tvosTest {
                dependsOn nonAndroidTest
                dependsOn nativeTest
            }
        }
    }
}

private void setupMultiplatformJs(Project project, boolean isIrEnabled = true) {
    project.kotlin {
        js(isIrEnabled ? BOTH : LEGACY) {
            browser()
            nodejs()
        }

        sourceSets {
            jsMain {
                dependsOn nonAndroidMain
                dependsOn nonNativeMain
            }

            jsTest {
                dependsOn nonAndroidTest
                dependsOn nonNativeTest

                dependencies {
                    implementation "org.jetbrains.kotlin:kotlin-test-js:$kotlin_version"
                }
            }
        }
    }
}

void setupCompose(Project project) {
    project.android {
        kotlinOptions {
            useIR = true
        }

        buildFeatures {
            compose true
        }

        composeOptions {
            kotlinCompilerExtensionVersion "${compose_jetpack_version}"
            kotlinCompilerVersion "${compose_kotlin_compiler_version}"
        }
    }
}

// As per KT-38694 (https://github.com/avdim/compose_mpp_workaround)
void setupComposeMppWorkaround(Project project) {
    project.with {
        configurations {
            create("composeCompiler") {
                setCanBeConsumed(false)
            }
        }

        dependencies {
            composeCompiler "androidx.compose.compiler:compiler:$compose_jetpack_version"
        }

        afterEvaluate {
            def composeCompilerJar = project.configurations.getByName("composeCompiler").resolve().getAt(0)
            if (composeCompilerJar == null) {
                throw new Exception("Please add \"androidx.compose.compiler:compiler\" (and only that) as a \"composeCompiler\" dependency")
            }

            project.tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile.class) {
                kotlinOptions.freeCompilerArgs += ["-Xuse-ir", "-Xplugin=$composeCompilerJar"]
            }
        }
    }
}

void setupAndroid(Project project) {
    project.android {
        compileSdkVersion 30
        buildToolsVersion "30.0.2"

        defaultConfig {
            minSdkVersion 21
            targetSdkVersion 30
        }

        compileOptions {
            sourceCompatibility JavaVersion.VERSION_1_8
            targetCompatibility JavaVersion.VERSION_1_8
        }

        kotlinOptions {
            jvmTarget = '1.8'
        }
    }
}

void setupMultiplatformPublications(Project project) {
    project.with {
        plugins.apply('maven-publish')

        publishing {
            publications.withType(MavenPublication.class).all {
                setupPublicationPom(project, it)
            }
        }

        setupPublicationRepository(project)

        final isMetadata = findProperty("publish_metadata") != null

        final metadataPublicationNames =
                [org.jetbrains.kotlin.gradle.plugin.mpp.KotlinMultiplatformPlugin.METADATA_TARGET_NAME, "kotlinMultiplatform"]

        tasks.withType(PublishToMavenRepository.class).all {
            it.enabled = (it.publication?.name in metadataPublicationNames) == isMetadata
        }
    }
}

void setupPublicationPom(Project project, Publication publication) {
    Task javadocJar = project.tasks.findByName("javadocJar")
    if (javadocJar == null) {
        javadocJar =
                project.task("javadocJar", type: Jar) {
                    archiveClassifier.set("javadoc")
                }
    }

    publication.with {
        artifact javadocJar

        pom {
            name = "Decompose"
            description = "Kotlin Multiplatform lifecycle-aware business logic components"
            url = "https://github.com/arkivanov/Decompose"

            licenses {
                license {
                    name = "The Apache License, Version 2.0"
                    url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                }
            }

            developers {
                developer {
                    id = "arkivanov"
                    name = "Arkadii Ivanov"
                    email = "arkann1985@gmail.com"
                }
            }

            scm {
                url = "https://github.com/arkivanov/Decompose"
                connection = "scm:git:git://github.com/arkivanov/Decompose.git"
                developerConnection = "scm:git:git://github.com/arkivanov/Decompose.git"
            }
        }
    }
}

void setupPublicationRepository(Project project) {
    project.with {
        plugins.apply("signing")

        publishing {
            signing {
                useInMemoryPgpKeys(System.getenv("SIGNING_KEY"), System.getenv("SIGNING_PASSWORD"))
                sign(publications)
            }

            repositories {
                maven {
                    url = "https://oss.sonatype.org/service/local/staging/deployByRepositoryId/${System.getenv("SONATYPE_REPOSITORY_ID")}"
                    credentials {
                        username = "arkivanov"
                        password = System.getenv("SONATYPE_PASSWORD")
                    }
                }
            }
        }
    }
}

void doIfAndroidEnabled(Closure block) {
    if (isTargetEnabled(Target.ANDROID)) {
        block()
    }
}

void doIfJvmEnabled(Closure block) {
    if (isTargetEnabled(Target.JVM)) {
        block()
    }
}

void doIfJsEnabled(Closure block) {
    if (isTargetEnabled(Target.JS)) {
        block()
    }
}

void doIfIosEnabled(Closure block) {
    if (isTargetEnabled(Target.IOS)) {
        block()
    }
}

void doIfMacosX64Enabled(Closure block) {
    if (isTargetEnabled(Target.MACOS_X64)) {
        block()
    }
}

void doIfTvosEnabled(Closure block) {
    if (isTargetEnabled(Target.TVOS)) {
        block()
    }
}

void doIfDarwinEnabled(Closure block) {
    if (isTargetEnabled(Target.IOS) || isTargetEnabled(Target.MACOS_X64) || isTargetEnabled(Target.TVOS)) {
        block()
    }
}

boolean isTargetEnabled(Target target) {
    return target in getTargets()
}

Set<Target> getTargets() {
    final String targets = findProperty("targets")

    return targets
            ?.split(",")
            ?.collect(new HashSet(), Target.&valueOf)
            ?: EnumSet.allOf(Target.class)
}
